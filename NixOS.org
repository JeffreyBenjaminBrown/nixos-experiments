* user ID problems
** changing user ID in NixOS is complicated
*** because it won't let you change the ID of an existing user
at least not by modifying configuration.nix.
(It'll compile the changes,
and announce that it won't apply that change.)
*** so do this
Log in as root, not self.
Remove all users from configuration.nix
Rebuild and switch.
Add user again, this time with the ID specified.
Rebuild and switch.
** to chmod back to 644 (normal): omit folders
Otherwise the folder contents cannot be read without sudo.
sudo find . -type f -print0 | xargs -0 chmod 644
sudo find . -type d -print0 | xargs -0 chmod 744

find . -type d -print0 | xargs -0 chown 1001
find . -type f -print0 | xargs -0 chown 1001
** TODO what is the default group in Kubuntu?
I have to change not only the id (to jeff=1000),
but the default group, too.
*** demo code
users.groups.students.gid = 1000;  # TODO: Enable.
                                   # for congruence with KUbuntu system
** the Ubuntu-NixOS user ID problem
On my KUbuntu system, "jeff" has default uid 1000;
on NixOS it's 1001. This creates permissions problems.
* TODO add automatic upgrading
** system.autoUpgrade.enable = true;
* TODO put NextCloud on the Rapsberry
chapter 15 in NixOS manual.
There's also TaskServer, for todo lists,
  GitLab,
* reading the manual
** getting started (installing, mostly)
*** move everything critical to an available USB
  NixOS.org (this file)
  installs/how-to-reinstall-linux.org
  borg-backup*.sh
*** know the USBs
**** white one has Kubuntu 18.04, just in case
**** slate = "Patriot 14.8G" is empty
**** shuttle
**** blue one = "PATRIOT" is 128G and empty
*** downloading it
**** the white USB (1.8 GB) is big enough
***** even for the graphical live booter
**** start with the live booter
***** use the 128GB stick as a store
**** will eventually need the unstable OS
***** because it works with JACK
*** configuring it post-build
**** git problems
  Sometimes repos need to be re-cloned or chmodded.
    Maybe this is because I borg-extracted as root?
    But strangely, the hode repo did not need this.
*** use MusNix
  https://github.com/musnix/musnix
  Alas, cannot install from this; must switch to it.
*** installing stuff (ch 3)
**** basically
***** modify /etc/nixos/configuration.nix
***** then run nixos-rebuild test
****** this tries it without making it the default
***** if it works, run nixos-rebuild switch
**** can add it to Grub menu
*** ch 4: upgrading Nix
**** is via channels, but voluntary
**** PITFALL: needs root to matter?
**** nixos-rebuild switch --upgrade
**** PITFALL: can't always rollback Nix channels
***** "Warning: It is generally safe to switch back and forth between channels. The only exception is that a newer NixOS may also have a newer Nix version, which may involve an upgrade of Nixâ€™s database schema. This cannot be undone easily, so in that case you will not be able to go back to your original channel."
**** can be automatic, periodic
** tricky | hard to look up
*** ch 5: configuration syntax
**** nix calls maps "sets"
**** package is a type
**** values are expressions, but attributes are not
  Let statements are valid wherever expression are valid.
**** merge sets with //
**** let, functions, map
**** string splice with $
  For instance, this function splices the string "name" into another:
  makeVirtualHost = name:
    { hostName = name;
      documentRoot = "/sites/${name}";
      adminAddr = "alice@example.org";
    };
**** options can be merged from multiple files
  when it makes sense -- e.g. lists, not strings
**** `config` arg: the complete merged configuration
**** discovering attribute values
 Helpful for complicated configurations, where options are getting merged from multiple files.
***** command line: nixos-option <option>
***** or use the repl: "nix repl <package>"
**** lambda expressions
 map (x: x.hostName) config.services.httpd.virtualHosts
**** select attributes with (.)
 { x = 1; y = 2; }.x == 1
***** can include a default
 ({ x = 1; y = 2; }.z or 3) == 4
**** add attributes to a scope
 (with pkgs.lib; head [ 1 2 3 ]) == 1
**** functions
***** are called Python-style
 name(argument)
***** PITFALL: bind after list construction
 so, for instance, you'll need to wrap applied functions in parens if they are expressions in lists:
   environment.systemPackages = [ (pkgs.emacs.override { gtk = pkgs.gtk3; }) ];
***** are always of one argument (which could be a set)x
***** can have default values
 { x, y ? "bar" }: x + y
***** can accept irrelevant values
 This function requires x and y, and ignroes anything else:
 { x, y, ... }: x + y
***** can bind the entire set argument to a name
 { x, y } @ args: x + y
**** import <file>
 "Load and return Nix expression in given file"
*** ch 6: package management
**** packages can have optional settings
 nixpkgs.config.firefox.enableGoogleTalkPlugin = true;
 PITFALL: this kind of option is not queriable
**** customizing packages
***** package dependencies can be overridden
  environment.systemPackages = [ (pkgs.emacs.override { gtk = pkgs.gtk3; }) ];
***** package attributes can be overridden
 e.g. to change the source code
 use overrideAttrs
***** customized packages do not break things that depend on the uncustommized one
 Nix will instead keep two versions of the package.
 But that too can be changed, with a "global override".
* configuring Emacs
** guidance
https://www.reddit.com/r/NixOS/comments/ad6miw/building_an_emacs_configuration_using_nixpkg/
https://nixos.org/nixpkgs/manual/#sec-emacs
** overlays -- better than one config.nix blob?
https://www.reddit.com/r/NixOS/comments/9swtg3/do_you_put_all_packages_you_install_into/e8s4u9f/
** some peoples' configs
https://github.com/tazjin/nixos-config
https://github.com/telent/config-nixpkgs
